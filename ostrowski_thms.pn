#import("ostrowski_defs.pn")

#load("ostrowski/sturmian_word.txt", "pecan", $C(n))

#load("automata/eventually_periodic.aut", "hoa", eventually_periodic(a, p))
#load("automata/square.aut", "hoa", square(a, i, n))
#load("automata/cube.aut", "hoa", cube(a, i, n))
#load("automata/fourth_pow.aut", "hoa", fourth_pow(a, i, n))
#load("automata/antisquare.aut", "hoa", antisquare(a, i, n))
#load("automata/palindrome_prefix.aut", "hoa", palindrome_prefix(a, n))

#load("test_alpha.txt", "walnut", bounded_alpha(a))

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

// Theorem ("Sturmian words are not eventually periodic", {
//     forall a, p. (bco_standard(a) & bco_valid(a, p)) => !eventually_periodic(a, p)
// }) .

// Theorem ("Sturmian words start with arbitrarily long squares", {
//     @no_simplify[
//         forall a. bco_standard(a) =>
//         forall n is ostrowski(a).
//         exists m is ostrowski(a). m > n &
//         forall j is ostrowski(a). @postprocess[(0 < j & j <= m)] => $C[j] = $C[j + m]
//     ]
// }) .

// Theorem ("All Sturmian words contain squares", {
//     @no_simplify[
//         forall a. bco_standard(a) => exists i, n. bco_positive(n) & bco_valid2(a,i,n) & square(a,i,n)
//     ]
// }) .

#load("fib_word.txt", "walnut", fib_alpha(a))

bco_1(a, x) := exists y. bco_zero(y) & bco_succ(a, y, x)
Define bcoConst curNum :=
    let $PREV_NUM := "bco_" ^ (toString (curNum - 1)) in
    let $NEXT_NUM := "bco_" ^ (toString curNum) in
        emit { $NEXT_NUM(a, x) := exists y. $PREV_NUM(a, y) & bco_succ(a, y, x) } .
Define bcoConsts ns :=
    match ns with
    case [] => print "Done."
    case x :: xs => do
        print ("Creating " ^ (toString x));
        bcoConst x;
        bcoConsts xs
    end.

// Define listAntisquares curNum $PREV_NUM :=
//     let $NEXT_NUM := "bco_" ^ (toString curNum)
//     in do
//         print ("Trying: " ^ (toString curNum));
//         emit { $NEXT_NUM(a, x) := exists y. $PREV_NUM(a, y) & bco_succ(a, y, x) };
//         print (example ostrowskiFormat { bco_standard(a) & bounded_alpha(a) & $NEXT_NUM(a, n) & @no_simplify[antisquare(a, i, n)] });
//         listAntisquares (curNum + 1) $NEXT_NUM .
// // Execute listAntisquares 2 bco_one .

// Theorem ("All Sturmian words contain finitely many antisquares", {
//     forall a. bco_standard(a) =>
//     exists m. bco_valid(a, m) &
//     forall i, n. antisquare(a, i, n) => bco_leq(n, m)
// }).

// Theorem ("All Sturmian words contain cubes", {
//     @no_simplify[
//         forall a. bco_standard(a) => exists i, n. bco_positive(n) & bco_valid2(a,i,n) & cube(a,i,n)
//     ]
// }) .

no_fourth_pow(a) := forall i, n. (bco_positive(n) & bco_valid2(a,i,n)) => !fourth_pow(a, i, n)
Example (ostrowskiFormat, { bco_standard(a) & no_fourth_pow(a) }).

Theorem ("All Sturmian words contain fourth powers", {
    @no_simplify[
        forall a. bco_standard(a) => exists i, n. bco_positive(n) & bco_valid2(a,i,n) & fourth_pow(a,i,n)
    ]
}) .

// Example (ostrowskiFormat, { bco_standard(a) & bco_valid(a, n) & palindrome_prefix(a, n) }) .

