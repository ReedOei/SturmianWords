#import("ostrowski_defs.pn")

#load("ostrowski/sturmian_word.txt", "pecan", $C(n))

#load("automata/eventually_periodic.aut", "hoa", eventually_periodic(a, p))
#load("automata/square.aut", "hoa", square(a, i, n))
#load("automata/cube.aut", "hoa", cube(a, i, n))
#load("automata/fourth_pow.aut", "hoa", fourth_pow(a, i, n))
#load("automata/antisquare.aut", "hoa", antisquare(a, i, n))
#load("automata/palindrome_prefix.aut", "hoa", palindrome_prefix(a, n))

#load("eventually_one.txt", "pecan", eventually_one(a))

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

Restrict a is bco_standard.
Restrict i, j, p, n, m are ostrowski(a).

// Theorem ("Sturmian words are not eventually periodic", {
//     forall a, p. !eventually_periodic(a, p)
// }) .

// Theorem ("Sturmian words start with arbitrarily long squares", {
//     @no_simplify[
//         forall a.
//         forall n.
//         exists m. m > n &
//         forall j. @postprocess[(0 < j & j <= m)] => $C[j] = $C[j + m]
//     ]
// }) .

// Theorem ("All Sturmian words contain squares", {
//     @no_simplify[
//         forall a. exists i, n. bco_positive(n) & square(a,i,n)
//     ]
// }) .

#load("fib_word.txt", "walnut", fib_alpha(a))
#load("test_alpha.txt", "walnut", bounded_alpha(a))

// Define listAntisquares curNum $PREV_NUM :=
//     let $NEXT_NUM := "bco_" ^ (toString curNum)
//     in do
//         print ("Trying: " ^ (toString curNum));
//         emit { $NEXT_NUM(a, x) := exists y. $PREV_NUM(a, y) & bco_succ(a, y, x) };
//         print (example ostrowskiFormat { bco_standard(a) & bounded_alpha(a) & $NEXT_NUM(a, n) & @no_simplify[antisquare(a, i, n)] });
//         listAntisquares (curNum + 1) $NEXT_NUM .
// // Execute listAntisquares 2 bco_one .

// Theorem ("All Sturmian words contain finitely many antisquares", {
//     forall a.
//     exists m.
//     forall i, n. antisquare(a, i, n) => bco_leq(n, m)
// }).

// Theorem ("All Sturmian words contain cubes", {
//     @no_simplify[
//         forall a. exists i, n. bco_positive(n) & cube(a,i,n)
//     ]
// }) .

Theorem ("All Sturmian words that are not eventually one contain fourth powers", {
    @no_simplify[
        forall a. (!eventually_one(a)) => exists i, n. bco_positive(n) & fourth_pow(a,i,n)
    ]
}) .

// Theorem ("All Sturmian words start with arbitarily long palindromes", {
//     forall a.
//     forall n.
//     exists m. m > n & palindrome_prefix(a, m)
// }) .

