#import("ostrowski_defs.pn")

#load("ostrowski/sturmian_word.txt", "pecan", $C(n))

#load("automata/eventually_periodic.aut", "hoa", eventually_periodic(a, p))
#load("automata/square.aut", "hoa", square(a, i, n))
#load("automata/cube.aut", "hoa", cube(a, i, n))

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

Theorem ("Sturmian words are not eventually periodic", {
    forall a, p. bco_valid(a, p) => !eventually_periodic(a, p)
}) .

Theorem ("Sturmian words start with arbitrarily long squares", {
    @no_simplify[
        forall a. bco_standard(a) =>
        forall n is ostrowski(a).
        exists m is ostrowski(a). m > n &
        forall j is ostrowski(a). @postprocess[(0 < j & j <= m)] => $C[j] = $C[j + m]
    ]
}) .

// Example (ostrowskiFormat, { @no_simplify[bco_standard(a) & bco_positive(n) & square(a, i, n)] }).

// Theorem ("All Sturmian words contain squares", {
//     @no_simplify[
//         forall a. bco_standard(a) => exists n. bco_positive(n) & bco_valid(a,n) & square(a,n)
//     ]
// }) .

#load("automata/antisquare.aut", "hoa", antisquare(a, i, n))
bco_one(a, x) := exists y. bco_zero(y) & bco_succ(a, y, x)
bco_two(a, x) := exists y. bco_one(a, y) & bco_succ(a, y, x)
bco_three(a, x) := exists y. bco_two(a, y) & bco_succ(a, y, x)
bco_four(a, x) := exists y. bco_three(a, y) & bco_succ(a, y, x)
bco_five(a, x) := exists y. bco_four(a, y) & bco_succ(a, y, x)

Define listAntisquares curNum $PREV_NUM :=
    let $NEXT_NUM := "bco_" ^ (toString curNum)
    in do
        print ("Trying: " ^ (toString curNum));
        emit { $NEXT_NUM(a, x) := exists y. $PREV_NUM(a, y) & bco_succ(a, y, x) };
        print (example ostrowskiFormat { bco_standard(a) & $NEXT_NUM(a, n) & @no_simplify[antisquare(a, i, n)] });
        listAntisquares (curNum + 1) $NEXT_NUM .
// Execute listAntisquares 2 bco_one .
// Example (ostrowskiFormat, { bco_standard(a) & bco_one(a, n) & antisquare(a, i, n) }).
// Example (ostrowskiFormat, { bco_standard(a) & bco_two(a, n) & antisquare(a, i, n) }).
// Example (ostrowskiFormat, { bco_standard(a) & bco_three(a, n) & antisquare(a, i, n) }).
// Example (ostrowskiFormat, { bco_standard(a) & bco_four(a, n) & antisquare(a, i, n) }).
// Example (ostrowskiFormat, { bco_standard(a) & bco_five(a, n) & antisquare(a, i, n) }).

// Theorem ("All Sturmian words contain finitely many antisquares", {
//     forall a. bco_standard(a) =>
//     exists m. bco_valid(a, m) &
//     forall n. antisquare(a, n) => bco_leq(n, m)
// }).

Theorem ("All Sturmian words contain cubes", {
    @no_simplify[
        forall a. bco_standard(a) => exists i, n. bco_positive(n) & bco_valid2(a,i,n) & cube(a,i,n)
    ]
}) .

// palindrome_prefix(a, n) :=
//     @no_simplify[
//         bco_positive(n) &
//         forall i, n1, n1i.
//             (@postprocess[bco_positive(i,n) & bco_valid2(a, i, n) & bco_leq(i, n) & bco_succ(a,n1,n)] & bco_adder(a,n1i,i,n1)) =>
//             @postprocess[$C[i] = $C[n1i]]
//     ]
// #save_aut("palindrome_prefix.aut", palindrome_prefix)
#load("automata/palindrome_prefix.aut", "hoa", palindrome_prefix(a, n))

Example (ostrowskiFormat, { bco_standard(a) & bco_valid(a, n) & palindrome_prefix(a, n) }) .

