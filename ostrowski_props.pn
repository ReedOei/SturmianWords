#import("ostrowski_defs.pn")

Theorem ("ost_dif_0 is reflexive", {
    forall a is bco_standard.
    (forall x is lazy_ostrowski(a). ost_dif_0(a,x,x))
    &
    (forall y is ostrowski(a). ost_dif_0(a,y,y))
}).

Theorem ("ost_dif_0 is symmetric", {
    forall a is bco_standard.
    forall x is ostrowski(a).
    forall y is lazy_ostrowski(a). ost_dif_0(a,x,y) <=> ost_dif_0(a,y,x)
}).

Theorem ("ost_dif_0 is transitive", {
    forall a is bco_standard.
    (forall x,y,z is ostrowski(a). if ost_dif_0(a,x,y) & ost_dif_0(a,y,z) then ost_dif_0(a,x,z))
    &
    (forall r,s,t is lazy_ostrowski(a). if ost_dif_0(a,r,s) & ost_dif_0(a,s,t) then ost_dif_0(a,r,t))
}).

Theorem ("Every Ostrowski representation has an equivalent Lazy Ostrowski representation and vice versa", {
    forall a is bco_standard.
        (forall n is ostrowski(a). exists m is lazy_ostrowski(a). ost_dif_0(a,n,m))
        &
        (forall n is lazy_ostrowski(a). exists m is ostrowski(a). ost_dif_0(a,n,m))
}).

Theorem ("The lazy Ostrowski representation is unique", {
    forall a is bco_standard.
    forall n is lazy_ostrowski(a).
    forall m is lazy_ostrowski(a).
        ost_dif_0(a,n,m) <=> bco_eq(n, m)
}).

Theorem ("All Ostrowski-a numeration systems have a 0.", {
    forall a is bco_standard. exists z is ostrowski(a). bco_valid(a, z) & bco_zero(z)
}).

Theorem ("All Ostrowski-a numeration systems have a 1.", {
    forall a, z.
    if bco_standard(a) & bco_zero(z) & bco_valid(a,z) then
        (exists i. bco_valid(a,i) & bco_succ(a,z,i))
}).

Theorem ("Sucessors are unique.", {
    forall a. forall x, y, z.
    if bco_succ(a,x,y) & bco_succ(a,x,z) then
        bco_eq(y,z)
}).

Theorem ("Addition of Ostrowski-a representations is a function (i.e., there is an output for every input).", {
    forall a. forall x, y.
    if bco_valid2(a,x,y) then
        exists z. bco_valid(a,z) & bco_adder(a,x,y,z)
}).

Theorem ("Every valid Ostrowski-a representation has a successor.", {
    forall a, x.
    if bco_valid(a, x) then
        exists u. bco_succ(a,x,u)
}).

Theorem ("Ostrowski addition satisfies base case of addition definition.", {
    forall a. forall x, y, z.
    if bco_zero(x) & bco_valid3(a, x, y, z) then
        (bco_adder(a, x, y, z) <=> bco_eq(y, z))
}).

Theorem ("Ostrowski addition satisfies inductive case of addition definition.", {
    forall a. forall x,y,z,u,v.
    if bco_valid3(a,x,y,z) & bco_succ(a,u,x) & bco_succ(a,v,z) then
        (bco_adder(a,x,y,z) <=> bco_adder(a,u,y,v))
}).

Theorem ("All natural numbers other than 0 have a predecessor.", {
    forall a, x.
    if bco_valid(a,x) then
        (bco_zero(x) | (exists u. bco_succ(a,u,x)))
}).

#assert_prop(true, test_bco_pred)

test_bco_adder_not_zero() := forall a,x,y,z. (bco_adder(a,x,y,z) & bco_zero(z)) => bco_zero(x)
#assert_prop(true, test_bco_adder_not_zero)

Theorem ("Ostrowski addition is commutative.", {
    forall a,x,y,z. bco_adder(a,x,y,z) <=> bco_adder(a,y,x,z)
}).

// This proves that bco_adder is associative.
test_bco_adder_not_associative_implies() := exists a,x,y,z,w. bco_valid3(a,x,y,z) & bco_valid(a,w) & @no_simplify[!(exists u. bco_adder(a,x,y,u) & bco_adder(a,u,z,w)) & (exists v. bco_adder(a,y,z,v) & bco_adder(a,x,v,w))]
#assert_prop(false, test_bco_adder_not_associative_implies)
test_bco_adder_not_associative_implied_by() := exists a,x,y,z,w. bco_valid3(a,x,y,z) & bco_valid(a,w) & @no_simplify[(exists u. bco_adder(a,x,y,u) & bco_adder(a,u,z,w)) & !(exists v. bco_adder(a,y,z,v) & bco_adder(a,x,v,w))]
#assert_prop(false, test_bco_adder_not_associative_implied_by)

// This proves that if x = y, there is always a z such that x + z = y, and this z is equal to zero as we expect.
test_bco_adder_identity() := forall a,x,y. (bco_valid2(a,x,y) & bco_eq(x,y)) => exists z. bco_adder(a,x,z,y) & bco_zero(z)
#assert_prop(true, test_bco_adder_identity)

// This proves that there is only one valid zero representation for a given base. Together with the above, this proves the existence of an identity (because it ensures that “zero” is the same element regardless of what we’re adding it to).
test_bco_zero_unique() := forall a. forall x. forall y. (bco_valid2(a,x,y) & bco_zero(x) & bco_zero(y)) => bco_eq(x,y)
#assert_prop(true, test_bco_zero_unique)

// This proves that <= is transitive. Antisymmetry and reflexivity follow immediately from the definition of bco_eq, so it suffices to observe that bco_eq works properly by examining its diagram.
test_bco_leq_trans() := forall x. forall y. forall z. (bco_valid3(a,x,y,z) & bco_leq(x,y) & bco_leq(y,z)) => bco_leq(x,z)
#assert_prop(true, test_bco_leq_trans)

// All the same, let's prove them anyway:
x is possibly_valid := exists a. bco_valid(a, x)
Execute equivalenceRelationCheck bco_eq possibly_valid.

// This proves that <= is a total order as opposed to a partial order.
test_bco_leq_total() := forall a. forall x. forall y. bco_valid2(a,x,y) => (bco_leq(x,y) | bco_leq(y,x))
#assert_prop(true, test_bco_leq_total)

Theorem ("For all x, y, and z, we have x <= y iff x + z <= y + z", {
    forall a. forall x,y,z,u,v.
    if (bco_valid3(a,x,y,z) & bco_valid2(a,u,v) & bco_adder(a,x,z,u) & bco_adder(a,y,z,v)) then
        (bco_leq(x, y) <=> bco_leq(u, v))
}).

Theorem ("If x <= y, then there is some z so that x + z = y.", {
    forall a. forall x,y.
    if bco_valid2(a,x,y) then
        (bco_leq(x,y) <=> exists z. bco_adder(a,x,z,y))
}).

// This was the original definition of bco_eq
bco_eq_temp(x, y) := bco_leq(x, y) & bco_leq(y, x)
// However, it produces a larger automaton than just comparing for strict equality, which is the same ASSUMING BOTH REPRESENTATIONS ARE USING THE NUMERATION SYSTEM
// But we just check that they are equivalent in all cases that we care about:
Theorem ("Definitions of bco_eq are equivalent", {
    forall a. bco_standard(a) => forall x, y. bco_valid2(a, x, y) => (bco_eq(x, y) <=> bco_eq_temp(x, y))
}).

