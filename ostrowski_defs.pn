// Old, unoptimized version of `bco_lsd_valid_pre`
// #load("ostrowski-automata/bco_lsd_valid_pre.txt", "walnut", bco_lsd_valid_pre(a, x))

// bco_lsd_valid_pre is an automaton accepting the directive sequence "a" of a continued fraction and some other string "x", and checks whether x is a valid Ostrowski-a representation.
// Note that the final bco_valid predicate used is not **exactly** this automaton; see below for details.
#load("ostrowski-automata/bco_lsd_valid_pre.aut", "hoa", bco_lsd_valid_pre(a, x))

// #load("ostrowski-automata/bco_leq.txt", "walnut", bco_leq(x, y))
#load("ostrowski-automata/bco_leq.aut", "hoa", bco_leq(x, y))

#load("ostrowski-automata/bco_finite_rep.txt", "walnut", bco_finite_rep(n))
#load("ostrowski-automata/bco_standard.txt", "walnut", bco_standard(n))

#load("ostrowski-automata/bco_adder.aut", "hoa", bco_adder(a, x, y, z))

#load("ostrowski-automata/cf_comp_len.txt", "pecan", cf_comp_len(a, b))

Define fromBase3Pair x y :=
    match (x, y) with
    case (0, 0) => 0
    case (0, 1) => 1
    case (1, 0) => 2
    case (1, 1) => "NOT IN BASE 3"
    end.

Define fromBase3 xs ys := zipWith fromBase3Pair xs ys.

Define base3Format var reps :=
    match reps with
    case [(prefix1, cycle1), (prefix2, cycle2)] =>
        (var, concatenate (fromBase3 prefix1 prefix2) ^ "(" ^ concatenate (fromBase3 cycle1 cycle2) ^ ")^ω")
    end.

Define fromSeparatedBinary l := map fromBinary (splitOn 2 l).

Define rotateOnto l1 l2 :=
    match l2 with
    case x :: xs => (l1 @ [x], xs @ [x])
    end.

Define normalizeOstrowski prefix cycle :=
    if isEmpty prefix then
        uncurry normalizeOstrowski (rotateOnto prefix cycle)
    else if (last prefix = 2) & (last cycle = 2) then (prefix, cycle)
    else uncurry normalizeOstrowski (rotateOnto prefix cycle) .

Define bracket str := "[" ^ toString str ^ "]" .

// We want the prefix to end in 2 so everything is nice
Define ostrowskiStr prefix cycle :=
    let (newPrefix, newCycle) := normalizeOstrowski prefix cycle in
    // Take tail because all strings start with "2..." (i.e., an empty number), which we ignore because it's uninteresting (and shouldn't actually matter)
        concatenate (map bracket (tail (fromSeparatedBinary newPrefix))) ^ "(" ^ concatenate (map bracket (fromSeparatedBinary newCycle)) ^ ")^ω" .

Define ostrowskiFormat var reps :=
    match reps with
    case [(prefix1, cycle1), (prefix2, cycle2)] =>
        (var, ostrowskiStr (fromBase3 prefix1 prefix2) (fromBase3 cycle1 cycle2))
    end.

// showFactor a i n returns a list containing the factor C[i..i+n].
Define showFactor a i n :=
    let j be { j = i & bco_valid(a, j) } in
        showFactorStep a i n j .
Define showFactorStep a i n j := do
    if holds { @no_simplify[ j < i + n ]} then
        let next := (if holds { @no_simplify[ $C(j) ] } then 1 else 0) in do
        print next;
        next ::
        (let k be { bco_succ(a,j,k) } in
            showFactorStep a i n k)
    else [] .

bco_valid(a, x) := bco_lsd_valid_pre(a, x) & bco_finite_rep(x)
bco_valid2(a, x, y) := bco_valid(a, x) & bco_valid(a, y)
bco_valid3(a, x, y, z) := bco_valid2(a, x, y) & bco_valid(a, z)
bco_valid4(a, x, y, z, w) := bco_valid3(a, x, y, z) & bco_valid(a, w)

// Postprocessing twice seems to help
// bco_adder_valid(a,x,y,z) := @postprocess[@postprocess[bco_adder(a,x,y,z) & bco_valid3(a,x,y,z)]]
// #save_aut("ostrowski-automata/bco_adder_valid.aut", bco_adder_valid)
// #load("ostrowski-automata/bco_adder_valid.aut", "hoa", bco_adder_valid(a, x, y, z))
// bco_adder_valid(a,x,y,z) := @postprocess[@postprocess[bco_adder(a,x,y,z) & bco_valid(a,z)]]
// #save_aut("ostrowski-automata/bco_adder_valid.aut", bco_adder_valid)
#load("ostrowski-automata/bco_adder_valid.aut", "hoa", bco_adder_valid(a, x, y, z))

// Generates the equal_3 automaton we use for equality purposes
Execute genEqual 3.
bco_eq(x, y) := equal_3(x, y)
bco_lt(x, y) := bco_leq(x, y) & !bco_eq(x,y)

bco_zero(z) := exists a. bco_valid(a,z) & forall y. bco_valid(a,y) => bco_leq(z,y)
bco_succ(a, x, y) := bco_valid2(a, x, y) & bco_leq(x, y) & (!bco_eq(x, y)) & forall z. bco_valid(a,z) => (bco_leq(z,x) | bco_leq(y,z))

ostrowski_zero(alpha, z) := bco_valid(alpha, z) & bco_zero(z)
x is ostrowski(alpha) := bco_valid(alpha, x)

ostrowski_even(a, n) := exists m. bco_adder(a,m,m,n)
// We use this instead of !ostrowski_even to avoid computing complements.
ostrowski_odd(a, n) := exists k. bco_succ(a,k,n) & exists m. bco_adder(a,m,m,k)

Structure ostrowski(alpha) defining {
    "adder": bco_adder(alpha, any, any, any),
    "less": bco_lt(any, any),
    "equal": bco_eq(any, any),
    "zero": ostrowski_zero(alpha, any),
    "even": ostrowski_even(alpha, any),
    "odd": ostrowski_odd(alpha, any)
}

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

Structure bco_standard defining {
    "equal": bco_eq(any, any)
}

#load("ostrowski-automata/lazy_ostrowski_i.txt", "pecan", lazy_ostrowski_i(a, x))
#load("ostrowski-automata/lazy_ostrowski_iii.txt", "pecan", lazy_ostrowski_iii(a, x))
#load("ostrowski-automata/lazy_ostrowski_iv.txt", "pecan", lazy_ostrowski_iv(a, x))

#load("ostrowski-automata/bounded_by.txt", "pecan", bounded_by(x, y))

lazy_ostrowski(a,x) := @postprocess[
    bco_standard(a) &
    lazy_ostrowski_i(a,x) &
    bounded_by(x,a) &
    lazy_ostrowski_iii(a,x) &
    lazy_ostrowski_iv(a,x) &
    bco_finite_rep(x)
]

#load("ostrowski-automata/ost_dif_0.txt", "pecan", ost_equiv(a,x,y))

Define genDigitLimit limit :=
    let aut := mkAut ["num"] [3] in
    let mkName := (\n => "digit_" ^ (toString n)) in
    let autStates := withStates aut (
                        [("start", true), (mkName (limit + 1), true)] @
                        (map (\n => (mkName n, true)) [1..limit])
                    ) in
    let finalAut := withTransitions autStates (
                        [("start", "digit_1", "2"),
                         (mkName (limit + 1), mkName (limit + 1), "0"),
                         (mkName (limit + 1), mkName (limit + 1), "2")] @
                        (flatMap (\n => [(mkName n, mkName n, "0"),
                                         (mkName n, mkName n, "1"),
                                         (mkName n, mkName (n + 1), "2")]) [1..limit])
                    ) in
    let built := buildAut finalAut in
    let $NAME := "is_" ^ (toString limit) ^ "_digits" in do
        emit { $NAME(num) := built } .

Execute genDigitLimit 1.
Execute genDigitLimit 2.
Execute genDigitLimit 3.
Execute genDigitLimit 4.
Execute genDigitLimit 5.
Execute genDigitLimit 6.

// Build an automaton recognizing sequences that have at most `limit` non-zero entries
Define genHasNDigits limit :=
    let aut := mkAut ["num"] [3] in
    let mkName := (\n => "digit_" ^ (toString n)) in
    let mkNameNonZero := (\n => "digit_nonzero_" ^ (toString n)) in
    let autStates := withStates aut (
                        [("start", true), (mkName (limit + 1), true)] @
                        (map (\n => (mkName n, true)) [1..limit]) @
                        (map (\n => (mkNameNonZero n, true)) [1..limit])
                    ) in
    let finalAut := withTransitions autStates (
                        [("start", "digit_1", "2"),
                         (mkName (limit + 1), mkName (limit + 1), "0"),
                         (mkName (limit + 1), mkName (limit + 1), "2")] @
                        (flatMap (\n => [(mkName n, mkName n, "0"),
                                         (mkName n, mkNameNonZero n, "1"),
                                         (mkName n, mkName n, "2")]) [1..limit]) @
                        (flatMap (\n => [(mkNameNonZero n, mkNameNonZero n, "0"),
                                         (mkNameNonZero n, mkNameNonZero n, "1"),
                                         (mkNameNonZero n, mkName (n+1), "2")]) [1..limit])
                    ) in
    let built := buildAut finalAut in
    let $NAME := "has_" ^ (toString limit) ^ "_digits" in do
        emit { $NAME(num) := built } .

Execute genHasNDigits 1.
// Execute genHasNDigits 2.
// Execute genHasNDigits 3.
// Execute genHasNDigits 4.
// Execute genHasNDigits 5.
// Execute genHasNDigits 6.
// Execute genHasNDigits 7.
// Execute genHasNDigits 15.
// Execute genHasNDigits 40.

Define genHasNthPow num :=
    let $NTH_POW := "pow_" ^ (toString num) in
    let $HAS_NTH := "has_" ^ $NTH_POW in
        emit { $HAS_NTH(a) := exists i, n. n > 0 & $NTH_POW(a, i, n) } .

Define genVars num :=
    if num = 0 then
        []
    else
        let newVar := "v" ^ (toString num) in
        let rest := genVars (num - 1) in do
            emit { Restrict newVar is ostrowski(a). };
            newVar :: rest .

// Define test prev vars :=
//     match vars with
//     case [x] => { exists x. prev < x & has_antisquare(a,x) }
//     case x :: xs =>
//         let next := test x xs
//         in { exists x. prev < x & has_antisquare(a,x) & next }
//     end.

// Define check prev vars :=
//     let pred := test prev vars in
//         emit { test(a) := pred }.

#load("ostrowski-automata/sturmian_word.aut", "hoa", $C(n))

