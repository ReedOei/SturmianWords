#import("ostrowski_defs.pn")

#load("ostrowski/sturmian_word.txt", "pecan", $C(n))

bco_positive(x) := @simplify[exists z. bco_zero(z) & bco_lt(z, x)]

eventually_periodic(a, p) := @no_simplify[
    bco_valid(a,p) &
    bco_positive(p) &
    exists n. bco_valid(a, n) &
    forall i, ip.
        (bco_adder(a,i,p,ip) & @postprocess[bco_valid(a,n) & bco_leq(n,i)])
        =>
        @postprocess[$C[i] = $C[ip]]
    ]
#save_aut("automata/eventually_periodic.aut", eventually_periodic)

square(a, i, n) :=
    @no_simplify[
        // exists i.
        bco_valid2(a, i, n) &
        bco_positive(i) &
        forall bound.
        @postprocess[(@postprocess[bco_valid(a, bound) & bco_adder(a, i, n, bound)] =>
        @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
            @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] = $C[jn]]]])]
    ]
#save_aut("automata/square.aut", square)

antisquare(a, i, n) :=
    @no_simplify[
        // exists i.
        bco_valid2(a, i, n) &
        bco_positive(i) &
        forall bound.
        @postprocess[(@postprocess[bco_valid(a, bound) & bco_adder(a, i, n, bound)] =>
        @postprocess[forall j. @postprocess[@postprocess[bco_lt(j, bound) & bco_leq(i, j) & bco_valid(a, j)] =>
            @postprocess[forall jn. bco_adder(a, j, n, jn) => $C[j] != $C[jn]]]])]
    ]
#save_aut("automata/antisquare.aut", antisquare)

cube(a, i, n) := @no_simplify[
    square(a, i, n) &
    exists ni. bco_adder(a, i, n, ni) & square(a, ni, n)
]
#save_aut("automata/cube.aut", cube)

palindrome_prefix(a, n) :=
    @no_simplify[
        bco_positive(n) &
        forall i, n1, n1i.
            (@postprocess[bco_positive(i,n) & bco_valid2(a, i, n) & bco_leq(i, n) & bco_succ(a,n1,n)] & bco_adder(a,n1i,i,n1)) =>
            @postprocess[$C[i] = $C[n1i]]
    ]
#save_aut("palindrome_prefix.aut", palindrome_prefix)

