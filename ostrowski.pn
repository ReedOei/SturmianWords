#import("ostrowski_defs.pn")

bco_has_one() := forall a, z. if bco_standard(a) & bco_zero(z) & bco_valid(a,z) then (exists i. bco_valid(a,i) & bco_succ(a,z,i))
#assert_prop(true, bco_has_one)

bco_succ_unique() := forall a. forall x. forall y. forall z. (bco_succ(a,x,y) & bco_succ(a,x,z)) => bco_eq(y,z)
#assert_prop(true, bco_succ_unique)

bco_adder_total() := forall a. forall x. forall y. bco_valid2(a,x,y) => exists z. bco_valid(a,z) & bco_adder(a,x,y,z)
#assert_prop(true, bco_adder_total)

bco_succ_total() := forall a, x. bco_valid(a, x) => exists u. bco_succ(a,x,u)
#assert_prop(true, bco_succ_total)

bco_valid_zero() := forall z. bco_zero(z) => exists a. bco_valid(a, z)
#assert_prop(true, bco_valid_zero)

test_bco_adder_base_case() := forall a. forall x. forall y. forall z. (bco_zero(x) & bco_valid3(a, x, y, z)) => (bco_adder(a,x,y,z) <=> bco_eq(y,z))
#assert_prop(true, test_bco_adder_base_case)
test_bco_adder_inductive_case() := forall a. forall x,y,z. bco_valid3(a,x,y,z) => forall u,v. (bco_succ(a,u,x) & bco_succ(a,v,z)) => (bco_adder(a,x,y,z) <=> bco_adder(a,u,y,v))
#assert_prop(true, test_bco_adder_inductive_case)

test_bco_pred() := forall a, x. if bco_valid(a,x) then (bco_zero(x) | (exists u. bco_succ(a,u,x)))
#assert_prop(true, test_bco_pred)

test_bco_adder_not_zero() := forall a,x,y,z. (bco_adder(a,x,y,z) & bco_zero(z)) => bco_zero(x)
#assert_prop(true, test_bco_adder_not_zero)

// This proves that bco_adder is commutative.
test_bco_adder_commutative() := forall a,x,y,z. bco_adder(a,x,y,z) <=> bco_adder(a,y,x,z)
#assert_prop(true, test_bco_adder_commutative)

// This proves that bco_adder is associative.
test_bco_adder_not_associative_implies() := exists a,x,y,z,w. bco_valid3(a,x,y,z) & bco_valid(a,w) & @no_simplify[!(exists u. bco_adder(a,x,y,u) & bco_adder(a,u,z,w)) & (exists v. bco_adder(a,y,z,v) & bco_adder(a,x,v,w))]
#assert_prop(false, test_bco_adder_not_associative_implies)
test_bco_adder_not_associative_implied_by() := exists a,x,y,z,w. bco_valid3(a,x,y,z) & bco_valid(a,w) & @no_simplify[(exists u. bco_adder(a,x,y,u) & bco_adder(a,u,z,w)) & !(exists v. bco_adder(a,y,z,v) & bco_adder(a,x,v,w))]
#assert_prop(false, test_bco_adder_not_associative_implied_by)

// This proves that if x = y, there is always a z such that x + z = y, and this z is equal to zero as we expect.
test_bco_adder_identity() := forall a,x,y. (bco_valid2(a,x,y) & bco_eq(x,y)) => exists z. bco_adder(a,x,z,y) & bco_zero(z)
#assert_prop(true, test_bco_adder_identity)

// This proves that there is only one valid zero representation for a given base. Together with the above, this proves the existence of an identity (because it ensures that “zero” is the same element regardless of what we’re adding it to).
test_bco_zero_unique() := forall a. forall x. forall y. (bco_valid2(a,x,y) & bco_zero(x) & bco_zero(y)) => bco_eq(x,y)
#assert_prop(true, test_bco_zero_unique)

// This proves that <= is transitive. Antisymmetry and reflexivity follow immediately from the definition of bco_eq, so it suffices to observe that bco_eq works properly by examining its diagram.
test_bco_leq_trans() := forall x. forall y. forall z. (bco_valid3(a,x,y,z) & bco_leq(x,y) & bco_leq(y,z)) => bco_leq(x,z)
#assert_prop(true, test_bco_leq_trans)

// All the same, let's prove them anyway:
x is possibly_valid := exists a. bco_valid(a, x)
Execute equivalenceRelationCheck bco_eq possibly_valid.

// This proves that <= is a total order as opposed to a partial order.
test_bco_leq_total() := forall a. forall x. forall y. bco_valid2(a,x,y) => (bco_leq(x,y) | bco_leq(y,x))
#assert_prop(true, test_bco_leq_total)

// This proves that x <= y iff x + z <= y + z.
test_bco_adder_order_comp() := forall a. forall x. forall y. forall z. forall u. forall v. (bco_valid3(a,x,y,z) & bco_valid2(a,u,v) & bco_adder(a,x,z,u) & bco_adder(a,y,z,v)) => (bco_leq(x, y) <=> bco_leq(u, v))
#assert_prop(true, test_bco_adder_order_comp)

// This proves that x <= y is equivalent to the existence of z such that x + z = y.
test_bco_adder_order_def() := forall a. forall x. forall y. bco_valid2(a,x,y) => (bco_leq(x,y) <=> exists z. bco_adder(a,x,z,y))
#assert_prop(true, test_bco_adder_order_def)

